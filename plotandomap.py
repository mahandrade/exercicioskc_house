# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_rtZ5J5P6dx_IjyqRDULci39iHeHbOZ8
"""

#Import Libraries

import numpy as np
import pandas as pd
import missingno as msno  
import plotly.express as px

# Supress Scientific Notation
pd.set_option('display.float_format', lambda x: '%.5f' % x)

#Loading Data
df = pd.read_csv('/content/kc_house_data.csv')

#fazer a conversão de date 
df['date'] = pd.to_datetime(df['date'])

"""**OLHAR O MAPA E CONSEGUIR IDENTIFICAR AS CASAS COM O MAIOR PREÇO**"""

df = pd.read_csv('/content/kc_house_data.csv')

houses = df[['id','lat','long','price']].copy()
import plotly.express as px

for i in range( len( houses) ):
    if houses.loc[i,'price']<= 321950:
        houses.loc[i,'level'] = 0

    elif (houses.loc[i,'price'] > 321950)  & ( houses.loc[i,'price'] <= 450000):
         houses.loc[i,'level'] = 1

    elif ( houses.loc[i,'price'] > 450000)  & ( houses.loc[i,'price'] <= 645000):
         houses.loc[i,'level'] = 2
    else:
         houses.loc[i,'level'] = 3
 

houses['level'] = houses['level'].astype( int )
    
    
fig = px.scatter_mapbox( houses,
                         lat="lat",
                         lon="long",
                         color="level",
                         size="price",
                         color_continuous_scale=px.colors.cyclical.IceFire,
                                    size_max=15,
                                    zoom=10)
fig.update_layout(mapbox_style="open-street-map")
fig.update_layout(height=600, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

"""**FILTRO INTERATIVO**"""

import ipywidgets as widgets
from ipywidgets import Layout
from ipywidgets import fixed

df = pd.read_csv('/content/kc_house_data.csv')

df['is_waterfront'] = df['waterfront'].apply( lambda x: 'yes' if x == 1 else 'no')

df['level'] = df['price'].apply( lambda x: 0 if x< 321950 else
                                           1 if ( x > 321950) & (x < 450000 )else
                                           2 if ( x > 450000) & (x < 645000 )else 3 )

df['level'] = df['level'].astype( int )
style = {'description_width': 'initial'}

#interative buttons
price_limit = widgets.IntSlider(
    value =  540000,
    min = 75000,
    max = 77000000,
    step = 1, 
    description= 'Maximun Price',
    disable=False,
    style = style
)

waterfront_bar = widgets.Dropdown(
    options= df['is_waterfront'].unique().tolist(),
    value='yes',
    description='Water View',
    disable=False)


def update_map( df, waterfront, limit ):
    houses = df[(df['price'] <= limit) & 
            (df['is_waterfront'] == waterfront)][['id', 'lat', 'long', 'price', 'level', 'bathrooms']]

fig = px.scatter_mapbox( houses,
                          lat="lat",
                          lon="long",
                          color="level",
                          size="price",
                          color_continuous_scale= px.colors.cyclical.HSV,
                          size_max=15,
                          zoom=10 )

fig.update_layout(mapbox_style="open-street-map" )
fig.update_layout(height=600, margin={"r":0,"t":0,"l":0,"b":0} )
fig.show()

widgets.interactive( update_map, df=fixed( df ), waterfront=waterfront_bar, limit=price_limit)

"""**Faça um gráfico com o tamanho dos pontos sendo igual ao tamanho da sala de estar**"""

import plotly.express as px # biblioteca usada para criar mapas

fig_map = df[['id', 'lat', 'long', 'price', 'sqft_living']]

# CRIANDO MAPA
maps = px.scatter_mapbox(fig_map,
                         lat= 'lat',
                         lon= 'long',
                         color= 'price',
                         color_continuous_scale= px.colors.cyclical.HSV,
                         size= 'sqft_living',
                         size_max= 15,
                         zoom = 10 )

maps.update_layout (mapbox_style= 'open-street-map')
maps.update_layout (height= 1080, margin= {'r': 0, 't': 0, 'l': 0, 'b': 0 })

maps.show()

